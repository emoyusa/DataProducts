quad_prog = solve.QP(D_matrix,d_vector,A_matrix,b_vector,meq=1)
quad_prog
# All data and CER parameters are preloaded in your workspace.  Type 'ls()'
# in the console to see them.
# Load relevant packages
library("zoo")
library("quadprog")
# Load the working environment
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab9.RData"))
# Explore the data set
head(returns_df)
tail(returns_df)
# Timeplots with stocks on individual graphs
my.panel <- function(...) {
lines(...)
abline(h = 0)
}
plot(returns_df, lwd = 2, panel = my.panel, col = "blue")
# Timeplots with stocks on same graph
plot(returns_df, plot.type = "single", main = "Returns", col = 1:4, lwd = 2)
abline(h = 0)
legend(x = "bottomleft", legend = colnames(returns_df), col = 1:4, lwd = 2)
# Parameters CER model
mu_hat_month = apply(returns_df, 2, mean)
mu_hat_month
sigma2_month = apply(returns_df, 2, var)
sigma2_month
sigma_month = sqrt(sigma2_month)
sigma_month
cov_mat_month = var(returns_df)
cov_mat_month
cor_mat_month = cor(returns_df)
cor_mat_month
# Pairwise scatterplots
pairs(coredata(returns_df),col="blue",pch=16)
# Calculate the global minimum variance portfolio
global_min_var_portfolio = globalMin.portfolio(mu_hat_month,cov_mat_month,shorts=TRUE)
global_min_var_portfolio
# Plot the portfolio weights of our four stocks
plot(global_min_var_portfolio)
# set restriction matrices
D_matrix = 2 * cov_mat_month
D_matrix
d_vector = rep(0, 4)
d_vector
A_matrix = cbind(rep(1, 4), diag(4))
A_matrix
b_vector = c(1, rep(0, 4))
b_vector
# use solve.QP to minimize portfolio variance
quad_prog = solve.QP(D_matrix,d_vector,A_matrix,b_vector,meq=1)
quad_prog
# The global minimum variance portfolio
global_min_var_portfolio = globalMin.portfolio(mu_hat_month,cov_mat_month,shorts=FALSE)
global_min_var_portfolio
# highest average return
mu_target = max(mu_hat_month)
# short sales allowed
efficient_porfolio_short = efficient.portfolio(mu_hat_month,cov_mat_month,mu_target,shorts=TRUE)
efficient_porfolio_short
plot(efficient_porfolio_short)
# no short sales allowed
efficient_porfolio_no_short = efficient.portfolio(mu_hat_month,cov_mat_month,mu_target,shorts=FALSE)
efficient_porfolio_no_short
plot(efficient_porfolio_no_short)
# The efficient frontier of risky assets
efficient_frontier = efficient.frontier(mu_hat_month,cov_mat_month,nport=20,alpha.min=-1,alpha.max=1,shorts=TRUE)
summary(efficient_frontier)
# The plot
plot(efficient_frontier,plot.assets=TRUE,col="blue",lwd=2)
t_bill_rate = .005
# Tangency portfolio short sales allowed
tangency_portfolio_short = tangency.portfolio(mu_hat_month, cov_mat_month, t_bill_rate, shorts=TRUE)
summary(tangency_portfolio_short)
# plot
plot(tangency_portfolio_short)
# Tangency portfolio short sales not allowed
tangency_portfolio_no_short = tangency.portfolio(mu_hat_month, cov_mat_month, t_bill_rate, shorts=FALSE)
summary(tangency_portfolio_no_short)
# plot
plot(tangency_portfolio_no_short)
q()
# Load relevant packages
library("PerformanceAnalytics")
library("zoo")
# Load the data
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData"))
# Explore the data set
head(returns_df)
tail(returns_df)
# Estimate the parameters: multivariate:
mu_hat_annual = apply(returns_df,2,mean)*12
sigma2_annual = apply(returns_df,2,var)*12
sigma_annual = sqrt(sigma2_annual)
cov_mat_annual = cov(returns_df)*12
cov_hat_annual = cov(returns_df)[1,2]*12
rho_hat_annual = cor(returns_df)[1,2]
mu_hat_annual
apply(returns_df,2,mean)
sigma# Load relevant packages
library("PerformanceAnalytics")
library("zoo")
# Load the data
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData"))
# Explore the data set
head(returns_df)
tail(returns_df)
# Estimate the parameters: multivariate:
mu_hat_annual = apply(returns_df,2,mean)*12
sigma2_annual = apply(returns_df,2,var)*12
sigma_annual = sqrt(sigma2_annual)
cov_mat_annual = cov(returns_df)*12
cov_hat_annual = cov(returns_df)[1,2]*12
rho_hat_annual = cor(returns_df)[1,2]
# The annual estimates of the CER model parameters for Boeing and Microsoft
mu_boeing = mu_hat_annual["rboeing"]
mu_msft = mu_hat_annual["rmsft"]
sigma2_boeing =  sigma2_annual["rboeing"]
sigma2_msft = sigma2_annual["rmsft"]
sigma_boeing = sigma_annual["rboeing"]
sigma_msft = sigma_annual["rmsft"]
sigma_boeing_msft = cov_hat_annual
rho_boeing_msft = rho_hat_annual
# The ratio Boeing stock vs Microsoft stock (adds up to 1)
boeing_weights = seq(from = -1, to = 2, by = 0.1)
msft_weights = 1-boeing_weights
# Portfolio parameters
mu_portfolio = mu_boeing*boeing_weights + mu_msft*msft_weights
sigma2_portfolio = sigma2_boeing*boeing_weights^2 + sigma2_msft*msft_weights^2 + 2*sigma_boeing_msft*boeing_weights*msft_weights
sigma_portfolio = sqrt(sigma2_portfolio)
# Plotting the different portfolios
plot(sigma_portfolio, mu_portfolio, type = "b", pch = 16, ylim = c(0, max(mu_portfolio)),
xlim = c(0, max(sigma_portfolio)), xlab = expression(sigma[p]), ylab = expression(mu[p]),
col = c(rep("green", 18), rep("red", 13)))
text(x = sigma_boeing, y = mu_boeing, labels = "Boeing", pos = 4)
text(x = sigma_msft, y = mu_msft, labels = "Microsoft", pos = 4)
# Annual risk-free rate of 3% per year for the T-bill
t_bill_rate = .03
# Ratio Boeing stocks
boeing_weights = seq(from = -1, to = 2, by = 0.1)
# Portfolio parameters
mu_portfolio_boeing_bill = mu_boeing*boeing_weights + .03*(1-boeing_weights)
sigma_portfolio_boeing_bill = sigma_boeing*boeing_weights
# Plot previous exercise
plot(sigma_portfolio, mu_portfolio, type = "b", pch = 16, ylim = c(0, max(mu_portfolio)),
xlim = c(0, max(sigma_portfolio)), xlab = expression(sigma[p]), ylab = expression(mu[p]),
col = c(rep("green", 18), rep("red", 13)))
text(x = sigma_boeing, y = mu_boeing, labels = "Boeing", pos = 4)
text(x = sigma_msft, y = mu_msft, labels = "MSFT", pos = 4)
# Portfolio Combination Boeing and T-bills
points(x=sigma_portfolio_boeing_bill, y=mu_portfolio_boeing_bill, col="blue",type="b")
# Sharp ratio Boeing
sharp_ratio_boeing = (mu_boeing - t_bill_rate)/sigma_boeing
sharp_ratio_msft = (mu_msft - t_bill_rate)/sigma_msft
# The global minimum variance portfolio -- Need to run portfolio.r first
global_min_var_portfolio = globalMin.portfolio(mu_hat_annual,cov_mat_annual)
global_min_var_portfolio
# Summary of global_min_var_portfolio, taking into account the annual
# risk-free rate of 3% per year
summary(global_min_var_portfolio, risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(global_min_var_portfolio)
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type = "b", pch = 16, ylim = c(0, max(mu_portfolio)),
xlim = c(0, max(sigma_portfolio)), xlab = expression(sigma[p]), ylab = expression(mu[p]),
col = c(rep("green", 18), rep("red", 13)))
text(x = sigma_boeing, y = mu_boeing, labels = "Boeing", pos = 4)
text(x = sigma_msft, y = mu_msft, labels = "MSFT", pos = 4)
# Plot the position of the global minimum variance portfolio
text(x = global_min_var_portfolio$sd, y = global_min_var_portfolio$er, labels = "Global min",
pos = 2)
# The tangency portfolio
tangency_portfolio = tangency.portfolio(mu_hat_annual, cov_mat_annual, risk.free=0.03)
tangency_portfolio
# Summary of tangency_portfolio with annual risk free rate of 3%
summary(tangency_portfolio, risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(tangency_portfolio)
# Annual risk-free rate of 3% per year for the T-bill
t_bill_rate = 0.03
# Set of tangency portfolio weights
tangency_weights = seq(from = 0, to = 2, by = 0.1)
# Portfolio parameters
mu_portfolio_tangency_bill = tangency_weights*tangency_portfolio$er + (1-tangency_weights)*t_bill_rate
sigma_portfolio_tangency_bill = tangency_weights*tangency_portfolio$sd
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type = "b", pch = 16, ylim = c(0, max(mu_portfolio)),
xlim = c(0, max(sigma_portfolio)), xlab = expression(sigma[p]), ylab = expression(mu[p]),
col = c(rep("green", 18), rep("red", 13)))
text(x = sigma_boeing, y = mu_boeing, labels = "Boeing", pos = 4)
text(x = sigma_msft, y = mu_msft, labels = "MSFT", pos = 4)
# Plot portfolio combinations of tangency portfolio and T-bills
points(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, col="blue", type="b", pch=16)
text(x = tangency_portfolio$sd, y = tangency_portfolio$er, labels = "Tangency",
pos = 2)
# Define the portfolio ratio's
tangency_weight = .1
t_bill_weight = .9
# Define the portfolio parameters
mu_portfolio_efficient = t_bill_weight*t_bill_rate + tangency_weight*tangency_portfolio$er
sd_portfolio_efficient = tangency_weight*tangency_portfolio$sd
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type = "b", pch = 16, ylim = c(0, max(mu_portfolio)),
xlim = c(0, max(sigma_portfolio)), xlab = expression(sigma[p]), ylab = expression(mu[p]),
col = c(rep("green", 18), rep("red", 13)))
text(x = sigma_boeing, y = mu_boeing, labels = "Boeing", pos = 4)
text(x = sigma_msft, y = mu_msft, labels = "MSFT", pos = 4)
text(x = tangency_portfolio$sd, y = tangency_portfolio$er, labels = "Tangency",
pos = 2)
points(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type = "b",
col = "blue", pch = 16)
# Plot Efficient Portfolio with 30% Tangency
points(sd_portfolio_efficient, mu_portfolio_efficient, col="orange", type="p", pch=16, cex=2)
text(x = sd_portfolio_efficient, y = mu_portfolio_efficient, labels = "Efficient Portfolio with 10% Tangency",
pos = 4, cex = 0.75)
# Calculate the weight of the tangency portfolio in the portfolio
tangency_weight = sigma_msft/tangency_portfolio$sd
# Calculate the portfolio parameters
mu_portfolio_efficient = (1-tangency_weight)*t_bill_rate + tangency_weight*tangency_portfolio$er
sd_portfolio_efficient = tangency_weight*tangency_portfolio$sd
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, bg = "NA", type = "b", pch = 16, ylim = c(0,
max(mu_portfolio)), xlim = c(0, max(sigma_portfolio)), xlab = expression(sigma[p]),
ylab = expression(mu[p]), col = c(rep("green", 18), rep("red", 13)))
text(x = sigma_boeing, y = mu_boeing, labels = "Boeing", pos = 4)
text(x = sigma_msft, y = mu_msft, labels = "MSFT", pos = 4)
text(x = tangency_portfolio$sd, y = tangency_portfolio$er, labels = "Tangency",
pos = 2)
points(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type = "b",
col = "blue", pch = 16)
# Plot Efficient Portfolio with the same risk as Boeing
points(sd_portfolio_efficient, mu_portfolio_efficient, type = "p", col = "orange",
pch = 16, cex = 2)
text(x = sd_portfolio_efficient, y = mu_portfolio_efficient, labels = "Efficient Portfolio with same risk as MSFT",
pos = 2, cex = 0.75)
# All data and CER parameters are preloaded in your workspace.  Type 'ls()'
# in the console to see them.
# Load relevant packages
library("zoo")
library("quadprog")
# Load the working environment
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab9.RData"))
# Explore the data set
head(returns_df)
tail(returns_df)
# Timeplots with stocks on individual graphs
my.panel <- function(...) {
lines(...)
abline(h = 0)
}
plot(returns_df, lwd = 2, panel = my.panel, col = "blue")
# Timeplots with stocks on same graph
plot(returns_df, plot.type = "single", main = "Returns", col = 1:4, lwd = 2)
abline(h = 0)
legend(x = "bottomleft", legend = colnames(returns_df), col = 1:4, lwd = 2)
# Parameters CER model
mu_hat_month = apply(returns_df, 2, mean)
mu_hat_month
sigma2_month = apply(returns_df, 2, var)
sigma2_month
sigma_month = sqrt(sigma2_month)
sigma_month
cov_mat_month = var(returns_df)
cov_mat_month
cor_mat_month = cor(returns_df)
cor_mat_month
# Pairwise scatterplots
pairs(coredata(returns_df),col="blue",pch=16)
# Calculate the global minimum variance portfolio
global_min_var_portfolio = globalMin.portfolio(mu_hat_month,cov_mat_month,shorts=TRUE)
global_min_var_portfolio
# Plot the portfolio weights of our four stocks
plot(global_min_var_portfolio)
# set restriction matrices
D_matrix = 2 * cov_mat_month
D_matrix
d_vector = rep(0, 4)
d_vector
A_matrix = cbind(rep(1, 4), diag(4))
A_matrix
b_vector = c(1, rep(0, 4))
b_vector
# use solve.QP to minimize portfolio variance
quad_prog = solve.QP(D_matrix,d_vector,A_matrix,b_vector,meq=1)
quad_prog
# The global minimum variance portfolio
global_min_var_portfolio = globalMin.portfolio(mu_hat_month,cov_mat_month,shorts=FALSE)
global_min_var_portfolio
# highest average return
mu_target = max(mu_hat_month)
# short sales allowed
efficient_porfolio_short = efficient.portfolio(mu_hat_month,cov_mat_month,mu_target,shorts=TRUE)
efficient_porfolio_short
plot(efficient_porfolio_short)
# no short sales allowed
efficient_porfolio_no_short = efficient.portfolio(mu_hat_month,cov_mat_month,mu_target,shorts=FALSE)
efficient_porfolio_no_short
plot(efficient_porfolio_no_short)
# The efficient frontier of risky assets
efficient_frontier = efficient.frontier(mu_hat_month,cov_mat_month,nport=20,alpha.min=-1,alpha.max=1,shorts=TRUE)
summary(efficient_frontier)
# The plot
plot(efficient_frontier,plot.assets=TRUE,col="blue",lwd=2)
# risk free rate
t_bill_rate = .005
# Tangency portfolio short sales allowed
tangency_portfolio_short = tangency.portfolio(mu_hat_month, cov_mat_month, t_bill_rate, shorts=TRUE)
summary(tangency_portfolio_short)
# plot
plot(tangency_portfolio_short)
# Tangency portfolio short sales not allowed
tangency_portfolio_no_short = tangency.portfolio(mu_hat_month, cov_mat_month, t_bill_rate, shorts=FALSE)
summary(tangency_portfolio_no_short)
# plot
plot(tangency_portfolio_no_short)
mu_R = .4
sigma_R = .0284
# Initial wealth W0 = $100,000
W0 = 100000
# 1% value-at-risk
qnorm(.01,mean=mu_R,sd=sigma_R) * W0
# 5% value-at-risk
qnorm(.05,mean=mu_R,sd=sigma_R) * W0
mu_R = .4
sigma_R = 2.84
# Initial wealth W0 = $100,000
W0 = 100000
# 1% value-at-risk
qnorm(.01,mean=mu_R,sd=sigma_R) * W0
# 5% value-at-risk
qnorm(.05,mean=mu_R,sd=sigma_R) * W0
mu_R = .4
sigma_R = .08656
# Initial wealth W0 = $100,000
W0 = 100000
# 1% value-at-risk
qnorm(.01,mean=mu_R,sd=sigma_R) * W0
# 5% value-at-risk
qnorm(.05,mean=mu_R,sd=sigma_R) * W0
mu_R = .4
sigma_R = .0284
# Initial wealth W0 = $100,000
W0 = 100000
# 1% value-at-risk
qnorm(.01,mean=mu_R,sd=sigma_R) * W0
# 5% value-at-risk
qnorm(.05,mean=mu_R,sd=sigma_R) * W0
mu_r = .4
sigma_r = .0284
# 1% value-at-risk
(exp(qnorm(.01,mean=mu_r,sd=sigma_r)) - 1)*W0
# 5% value-at-risk
(exp(qnorm(.05,mean=mu_r,sd=sigma_r)) - 1)*W0
mu_R = .4
sigma_R = .08656
# Initial wealth W0 = $100,000
W0 = 100000
# 1% value-at-risk
qnorm(.01,mean=mu_R,sd=sigma_R) * W0
# 5% value-at-risk
qnorm(.05,mean=mu_R,sd=sigma_R) * W0
mu_r = .4
sigma_r = .08656
# 1% value-at-risk
(exp(qnorm(.01,mean=mu_r,sd=sigma_r)) - 1)*W0
# 5% value-at-risk
(exp(qnorm(.05,mean=mu_r,sd=sigma_r)) - 1)*W0
mu_R = .004
sigma_R = .0284
# Initial wealth W0 = $100,000
W0 = 100000
# 1% value-at-risk
qnorm(.01,mean=mu_R,sd=sigma_R) * W0
# 5% value-at-risk
qnorm(.05,mean=mu_R,sd=sigma_R) * W0
mu_r = .004
sigma_r = .0284
# 1% value-at-risk
(exp(qnorm(.01,mean=mu_r,sd=sigma_r)) - 1)*W0
# 5% value-at-risk
(exp(qnorm(.05,mean=mu_r,sd=sigma_r)) - 1)*W0
q()
require(rCharts)
r1 <- rPlot(Sepal.Length ~ Sepal.Width | Species, data = iris, color = 'Species', type = 'point')
r1
require(rCharts)
names(iris) = gsub("\\.","", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'bar',
data = subset(haireye, Sex == 'Male')
)
n1
require(rCharts)
hair_eye = as.data.frame(HairEyeColor)
r2 <- rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
r2
install.packages(googleVis)
install.packages("googleVis")
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
q()
install.packages("googleVis")
print(M, "chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M
M
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
M
plot(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(M)
suppressPackageStartupMessages(library(googleVis))
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400))
plot(G)
suppressPackageStartupMessages(library(googleVis))
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400, region= "150"))
plot(G)
demo(googleVis)
suppressPackageStartupMessages(library(googleVis))
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400, region= "150"))
T1 <- gvisTable(Exports, option = list (width=200, height=270))
M <- gvisMotionChart(Fruits,"Fruit", "Year", option=list(width=400, height=370))
GT <- gvisMerge(G,T1,horizontal=FALSE)
GTM <- gvisMerge(GT,M,horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GT)
plot(GTM)
library(manipulate)
myPlot <- function(s) {
    plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
    abline(0, s)
}
plot(myPlot)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
    plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
    abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
plot(myPlot)
myPlot
myPlot(2)
library(manipulate)
myPlot <- function(s) {
    plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
    abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
plot(myPlot)
library(manipulate)
myPlot <- function(s) {
    plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
    abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
plot(myPlot)
library(manipulate)
myPlot <- function(s) {
    plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
    abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
plot(myPlot)
dTable(airquality, sPaginationType = "full_numbers") 
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers") 
update.packages(ask='graphics',checkBuilt=TRUE)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.packages('devtools')
q()
install.packages('devtools')
q()
runApp()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
runApp()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
runApp()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
q()
